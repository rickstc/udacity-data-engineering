1. Introduction
2. Arithmetic Operators
- Addition: +
- Subtraction: -
- Multiplcation: *
- Division: /
- Mod (remainder after dividing): %
- Exponentiation: **
- Divide and round down: //
- Bitwise XOR: ^ 

5. Variables and Assignment Operators
= - assignment operator
variable names can be used to access variable values

8. Integers and Floats
int - for integer values
float - for decimal or floating point values
- python built in function type() can check the type
- type conversion can be accomplished using type casting
    - some_int = 4
    - some_float = float(some_int)
    - some_float = 4.0
- floating point numbers are approximations
    - print(0.1 + 0.1 + 0.1) = 0.30000000000000004

Python Best Practices:
Alway sfollow PEP8, limiting each line of code to 80 characters

10. Booleans, Comparison Operators, and Logical Operators
the_sun_is_up = True
the_sun_is_down = False

Comparison Operators:
- < less than
- > greater than
- <= less than or equal to
- >= greater than or equal to
- == equal to
- != not equal to

Logical Operators
- and - if both sides are True
- or - if one side is True
- not - inverses a boolean type

13. Strings
- Immutable, ordered list of characters
- Single or double quotes can be used
- Strings can include any characters
- Quotes can be escaped with the backslash
- Backslashes can be escaped with another backslash

String Operations:
- + concatenates strings
- * Multiplcation repeats the string
- Subtraction and division cannot be used to operate on strings
- len() - returns the length of a string (in characters)


16. Type and Type Conversion
- Parenthesis defines the order of Operations
- Different data types have different properties
- New objects can be created from old objects and the type can be converted in the process

19. String Methods
Operators: + = <=
Functions: print() len() float()
Methods: Methods are associated with specific types of objects
- The object is always the first input to the method: sample_string.lower()
- Methods can take arguments: sample_string.find('e')

Format Method:
animal = "dog"
action = "bite"
print("Does your {} {}".format(animal, action))

